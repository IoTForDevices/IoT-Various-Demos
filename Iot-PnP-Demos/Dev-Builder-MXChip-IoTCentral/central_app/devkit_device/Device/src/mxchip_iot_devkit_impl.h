/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.7.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 20/01/06
 ***********************************************************************************************/

#ifndef MXCHIP_IOT_DEVKIT_IMPL
#define MXCHIP_IOT_DEVKIT_IMPL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

/**
* Type definition
*/

/**
* @brief Result of DigitalTwin command execution.
*/
typedef enum DIGITALTWIN_COMMAND_RESULT_TAG
{
    DIGITALTWIN_COMMAND_OK,
    DIGITALTWIN_COMMAND_TIMEOUT,
    DIGITALTWIN_COMMAND_ERROR
} DIGITALTWIN_COMMAND_RESULT;

typedef struct LEDS_BLINK_blinkResponse_TAG
{
    char* description;

} LEDS_BLINK_blinkResponse;

typedef struct SCREEN_ECHO_echoResponse_TAG
{
    char* echo;

} SCREEN_ECHO_echoResponse;

/**
* Device telemetries related methods.
*/

double Sensors_Telemetry_ReadHumidity();

double Sensors_Telemetry_ReadTemperature();

double Sensors_Telemetry_ReadPressure();

/**
* Device properties related methods.
*/

char* Deviceinfo_Property_GetManufacturer();

char* Deviceinfo_Property_GetModel();

char* Deviceinfo_Property_GetSwVersion();

char* Deviceinfo_Property_GetOsName();

char* Deviceinfo_Property_GetProcessorArchitecture();

char* Deviceinfo_Property_GetProcessorManufacturer();

long Deviceinfo_Property_GetTotalStorage();

long Deviceinfo_Property_GetTotalMemory();

bool Settings_Property_FanSpeedCallback(double fanSpeed);

bool Settings_Property_VoltageCallback(double voltage);

bool Settings_Property_CurrentCallback(double current);

bool Settings_Property_IrSwitchCallback(bool irSwitch);

/**
* Device commands related methods.
*/

DIGITALTWIN_COMMAND_RESULT Leds_Command_Blink(long interval, LEDS_BLINK_blinkResponse* response, unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Leds_Command_TurnOnLed(unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Leds_Command_TurnOffLed(unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Screen_Command_Echo(char* text, SCREEN_ECHO_echoResponse* response, unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Screen_Command_Countdown(int number, unsigned int* statusCode);

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName);
void SendTelemetry_Error_Callback(const char* interfaceName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* propertyName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* propertyName);

#ifdef __cplusplus
}
#endif

#endif // MXCHIP_IOT_DEVKIT_IMPL
